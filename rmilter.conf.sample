# Sample config file for rmilter
# $Id$
#

# pidfile - path to pid file
# Default: pidfile = /var/run/rmilter.pid

pidfile = /var/run/rmilter/rmilter.pid;


clamav {
	# servers - clamav socket definitions in format:
	# unix:/path/to/file
	# inet:port@host
	# sockets are separated by ','
	# Default: empty
	servers = clam5.rambler.ru, clam6.rambler.ru, clam8.rambler.ru;
	# connect_timeout - timeout in miliseconds for connecting to clamav
	# Default: 1s
	connect_timeout = 1s;

	# port_timeout - timeout in miliseconds for waiting for clamav port response
	# Default: 4s
	port_timeout = 4s;

	# results_timeout - timeout in miliseconds for waiting for clamav response
	# Default: 20s
	results_timeout = 20s;

	# error_time - time in seconds during which we are counting errors
	# Default: 10
	error_time = 10;

	# dead_time - time in seconds during which we are thinking that server is down
	# Default: 300
	dead_time = 300;

	# maxerrors - maximum number of errors that can occur during error_time to make us thinking that 
	# this upstream is dead
	# Default: 10
	maxerrors = 10;
};

memcached {
	# servers - memcached servers list in format:
	# host[:port][, host[:port]]
	servers = localhost, mcgi18.rambler.ru:11211;

	# connect_timeout - timeout in miliseconds for waiting for memcached
	# Default: 1s
	connect_timeout = 1s;

	# error_time - time in seconds during which we are counting errors
	# Default: 10
	error_time = 10;

	# dead_time - time in seconds during which we are thinking that server is down
	# Default: 300
	dead_time = 300;

	# maxerrors - maximum number of errors that can occur during error_time to make us thinking that 
	# this upstream is dead
	# Default: 10
	maxerrors = 10;

	# protocol - protocol that is using for connecting to memcached (tcp or udp)
	# Default: udp
	protocol = tcp;
};

# bind_socket - socket credits for local bind:
# unix:/path/to/file - bind to local socket
# inet:port@host - bind to inet socket
# Default: bind_socket = unix:/var/tmp/rmilter.sock;

bind_socket = unix:/var/run/rmilter/rmilter.sock;

# tempdir - path to directory that contains temporary files
# Default: $TMPDIR

tempdir = /spool/tmp;

# max_size - maximum size of scanned mail with clamav and dcc
# Default: 0 (no limit)
max_size = 10M;

# spf_domains - path to file that contains hash of spf domains
# Default: empty

spf_domains = rambler.ru, mail.ru;

# use_dcc - whether use or not dcc system
# Default: no

use_dcc = yes;

# rule definition:
# rule {
#	accept|discard|reject|tempfail|quarantine "[message]"; <- action definition
#	[not] connect <regexp> <regexp>; <- conditions
#	helo <regexp>;
#	envfrom <regexp>;
#	envrcpt <regexp>;
#	header <regexp> <regexp>;
#	body <regexp>;
# };

# limits section
limits {
	# Whitelisted ip
	limit_whitelist_ip = 194.67.45.4;
	# Whitelisted recipients
	limit_whitelist_rcpt =  postmaster, mailer-daemon;
	# Addrs for bounce checks
	limit_bounce_addrs = postmaster, mailer-daemon, symantec_antivirus_for_smtp_gateways, <>, null, fetchmail-daemon;
	# Limit for bounce mail
	limit_bounce_to = 5:0.000277778;
	# Limit for bounce mail per one source ip
	limit_bounce_to_ip = 5:0.000277778;
	# Limit for all mail per recipient
	limit_to = 20:0.016666667;
	# Limit for all mail per one source ip
	limit_to_ip = 30:0.025;
	# Limit for all mail per one source ip and from address
	limit_to_ip_from = 100:0.033333333;
};

# Order of checks at EOM:
# 
# SPF -> DCC -> CLAMAV
